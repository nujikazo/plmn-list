// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlmnServiceClient is the client API for PlmnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlmnServiceClient interface {
	ListPlmn(ctx context.Context, in *ListPlmnRequest, opts ...grpc.CallOption) (*ListPlmnsResponses, error)
}

type plmnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlmnServiceClient(cc grpc.ClientConnInterface) PlmnServiceClient {
	return &plmnServiceClient{cc}
}

func (c *plmnServiceClient) ListPlmn(ctx context.Context, in *ListPlmnRequest, opts ...grpc.CallOption) (*ListPlmnsResponses, error) {
	out := new(ListPlmnsResponses)
	err := c.cc.Invoke(ctx, "/plmn.PlmnService/ListPlmn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlmnServiceServer is the server API for PlmnService service.
// All implementations should embed UnimplementedPlmnServiceServer
// for forward compatibility
type PlmnServiceServer interface {
	ListPlmn(context.Context, *ListPlmnRequest) (*ListPlmnsResponses, error)
}

// UnimplementedPlmnServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPlmnServiceServer struct {
}

func (UnimplementedPlmnServiceServer) ListPlmn(context.Context, *ListPlmnRequest) (*ListPlmnsResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlmn not implemented")
}

// UnsafePlmnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlmnServiceServer will
// result in compilation errors.
type UnsafePlmnServiceServer interface {
	mustEmbedUnimplementedPlmnServiceServer()
}

func RegisterPlmnServiceServer(s grpc.ServiceRegistrar, srv PlmnServiceServer) {
	s.RegisterService(&PlmnService_ServiceDesc, srv)
}

func _PlmnService_ListPlmn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlmnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlmnServiceServer).ListPlmn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plmn.PlmnService/ListPlmn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlmnServiceServer).ListPlmn(ctx, req.(*ListPlmnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlmnService_ServiceDesc is the grpc.ServiceDesc for PlmnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlmnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plmn.PlmnService",
	HandlerType: (*PlmnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlmn",
			Handler:    _PlmnService_ListPlmn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plmn.proto",
}
