// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createPlmn = `-- name: CreatePlmn :execresult
INSERT INTO plmn (
	mcc, mnc, iso, country, country_code, network
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreatePlmnParams struct {
	Mcc         string
	Mnc         string
	Iso         string
	Country     string
	CountryCode sql.NullString
	Network     string
}

func (q *Queries) CreatePlmn(ctx context.Context, arg CreatePlmnParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPlmn,
		arg.Mcc,
		arg.Mnc,
		arg.Iso,
		arg.Country,
		arg.CountryCode,
		arg.Network,
	)
}

const getPlmn = `-- name: GetPlmn :one
SELECT id, mcc, mnc, iso, country, country_code, network, delete_flg FROM plmn
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlmn(ctx context.Context, id int64) (Plmn, error) {
	row := q.db.QueryRowContext(ctx, getPlmn, id)
	var i Plmn
	err := row.Scan(
		&i.ID,
		&i.Mcc,
		&i.Mnc,
		&i.Iso,
		&i.Country,
		&i.CountryCode,
		&i.Network,
		&i.DeleteFlg,
	)
	return i, err
}

const listPlmn = `-- name: ListPlmn :many
SELECT id, mcc, mnc, iso, country, country_code, network, delete_flg FROM plmn
`

func (q *Queries) ListPlmn(ctx context.Context) ([]Plmn, error) {
	rows, err := q.db.QueryContext(ctx, listPlmn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plmn
	for rows.Next() {
		var i Plmn
		if err := rows.Scan(
			&i.ID,
			&i.Mcc,
			&i.Mnc,
			&i.Iso,
			&i.Country,
			&i.CountryCode,
			&i.Network,
			&i.DeleteFlg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
